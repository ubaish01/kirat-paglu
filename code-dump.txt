src/app/api/leaderboard/route.ts
import { NextResponse } from "next/server"
import fs from "fs"
import path from "path"

// Define the leaderboard entry type
type LeaderboardEntry = {
  username: string
  time: number
  date: string
}

// Path to the leaderboard directory
const leaderboardDir = path.join(process.cwd(), "leaderboard")

// Ensure the leaderboard directory exists
const ensureLeaderboardDir = () => {
  if (!fs.existsSync(leaderboardDir)) {
    fs.mkdirSync(leaderboardDir, { recursive: true })
  }
}

// Get all leaderboard entries
export async function GET() {
  try {
    ensureLeaderboardDir()

    // Read all files in the leaderboard directory
    const files = fs.readdirSync(leaderboardDir)
    const entries: LeaderboardEntry[] = []

    // Parse each file and add to entries
    for (const file of files) {
      if (file.endsWith(".json")) {
        const filePath = path.join(leaderboardDir, file)
        const fileContent = fs.readFileSync(filePath, "utf-8")
        const userData = JSON.parse(fileContent)

        // Get the best time for this user
        const bestEntry = userData.scores.reduce(
          (best: LeaderboardEntry | null, current: LeaderboardEntry) =>
            !best || current.time < best.time ? current : best,
          null,
        )

        if (bestEntry) {
          entries.push(bestEntry)
        }
      }
    }

    // Sort by fastest time
    const sortedEntries = entries.sort((a, b) => a.time - b.time)

    return NextResponse.json({ entries: sortedEntries })
  } catch (error) {
    console.error("Error getting leaderboard:", error)
    return NextResponse.json({ error: "Failed to get leaderboard" }, { status: 500 })
  }
}

// Save a new score
export async function POST(request: Request) {
  try {
    const { username, time } = await request.json()

    if (!username || !time) {
      return NextResponse.json({ error: "Username and time are required" }, { status: 400 })
    }

    ensureLeaderboardDir()

    // Sanitize username for filename
    const sanitizedUsername = username.replace(/[^a-zA-Z0-9_]/g, "_")
    const filePath = path.join(leaderboardDir, `${sanitizedUsername}.json`)

    // Create entry object
    const newEntry: LeaderboardEntry = {
      username,
      time,
      date: new Date().toISOString().split("T")[0],
    }

    // Check if file exists and update
    let userData = { scores: [] as LeaderboardEntry[] }

    if (fs.existsSync(filePath)) {
      const fileContent = fs.readFileSync(filePath, "utf-8")
      userData = JSON.parse(fileContent)
    }

    // Add new score
    userData.scores.push(newEntry)

    // Save updated data
    fs.writeFileSync(filePath, JSON.stringify(userData, null, 2))

    return NextResponse.json({ success: true, entry: newEntry })
  } catch (error) {
    console.error("Error saving score:", error)
    return NextResponse.json({ error: "Failed to save score" }, { status: 500 })
  }
}



src/app/globals.css
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


src/app/page.tsx
"use client";

import Game from "@/components/game";

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between">
      <Game />
    </main>
  );
}


